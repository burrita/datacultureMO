{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import statsmodels.api as sm\n",
    "from pandas.core import datetools"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 1 (2 балла)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Выведите число, которое нужно добавить к списку, чтобы сумма была 300.\n",
    "\n",
    "Примеры:\n",
    "\n",
    "$summa([100,200])=0$\n",
    "\n",
    "$summa([100,100,50])=50$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 2 (2 балла)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Задача аналогичная прошлой, но нужно написать не используя функцию sum (а также np.sum и подобные)\n",
    "\n",
    "\n",
    "Примеры: \n",
    "\n",
    "$summa([100,200])=0$\n",
    "\n",
    "$summa([100,100,50])=50$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 3 (3 балла)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Вам предложен датасет с характеристиками квартир:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('flat.csv', sep='\\t', index_col='n')  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Описание переменных:__\n",
    "\n",
    "```\n",
    "n – номер квартиры по порядку\n",
    "\n",
    "price – цена квартиры в $1000\n",
    "\n",
    "totsp – общая площадь квартиры, кв.м.\n",
    "\n",
    "livesp жилая площадь квартиры, кв.м.\n",
    "\n",
    "kitsp – площадь кухни, кв.м.\n",
    "\n",
    "dist – расстояние от центра в км.\n",
    "\n",
    "metrdist – расстояние до метро в минутах\n",
    "\n",
    "walk – 1 – пешком от метро, 0 – на транспорте\n",
    "\n",
    "brick 1 – кирпичный, монолит ж/б, 0 – другой\n",
    "\n",
    "floor 1 – этаж кроме первого и последнего, 0 – иначе."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Задание:__ постройте регрессионную модель, предсказывающую цену квартиры (1 балл). Проинтерпретируйте полученные результаты (1 балл). Не забудьте провести проверку на мультиколлинеарность (1 балл)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 4 (2 балла)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src='https://avatars.mds.yandex.net/get-pdb/33827/da60fdac-ae8f-41a5-9620-4767677a0088/s1200'>\n",
    "\n",
    "Дядя Фёдор каждое летние каникулы проводит в Простоквашино (это не продакт-плейсмент) вместе с котом Матроскиным и псом Шариком. В хозяйстве у них также есть корова Мурка, которая даёт самое вкусное молоко в округе.\n",
    "\n",
    "Каждый месяц Дядя Фёдор пишет родителям письмо о том, что происходит в деревне. Однако в этот раз ему не захотелось снова писать о том, как у него лапы ломит и хвост отваливается, а еще он захотел показать родителям, какой он взрослый и самостоятельный в быту, поэтому решил описать, как идут дела в его молочном хозяйстве. Мальчик решил подойти к делу ответсвенно и выписал месячный надой с коровы Мурки за последние 5 лет в литрах в таблицу"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Откройте файл с информацией по надою молока\n",
    "milkdata = pd.read_csv('monthly-milk-production.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "milkdata.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Дядя Федор хочет сравнить месячный надой по годам. Он ходил на лекции по дисциплине \"Основы анализа данных в молочных отношениях\", поэтому знает разные типы графиков и считает, что лучше всего построить боксплоты. Однако когда он отходил от рабочего стола, кот Матроскин и пёс Шарик дописывали код за него и наделали ошибок.Помогите Дяде Фёдору найти ошибки в коде, исправьте их, а также добавьте недостающие элементы оформления графика (подписи осей, легенду, придумайте графикам подхдящее им по смыслу название) __1 балл__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize = (15, 15))\n",
    "my_pal = ('aqua','deepink', 'yellow', 'r', 'blueviolet')\n",
    "info = milkdata [[\"Месячный надой за год 1\", \"Месячный надой за год 2\", \"Месячный надой за год 3\", \"Месячный надой за год 4\", \"Месячный надой за год 5\"]]\n",
    "\n",
    "fig1= sns.boxplot(data = info)\n",
    "fig1.set_xticklables(fig1.get_xticklabels(),rotation = 40)\n",
    "\n",
    "\n",
    "plt.title ('Надой')\n",
    "plt.xlabel ('Гг')\n",
    "plt.ylabel ('Литры')\n",
    "plt.show ()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "После того, как дядя Федор построил боксплоты, он решил поcмотреть, как соотносятся объемы надоя за каждый из 5 лет. Для этого он хочет построить круговую диаграмму, на которой будет отображено сотношение объемов надоя за эти года. Нарисуйте для дяди Федора диаграмму, добавьте все необходимые подписи и легенду. __1 балл__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(15,15))\n",
    "a=sum(milkdata[\"Месячный надой за год 1\"])\n",
    "b=sum(milkdata[\"Месячный надой за год 2\"])\n",
    "c=sum(milkdata[\"Месячный надой за год 3\"])\n",
    "d=sum(milkdata[\"Месячный надой за год 4\"])\n",
    "e=sum(milkdata[\"Месячный надой за год 5\"])\n",
    "slices=[a,b,c,d,e]\n",
    "years=[\"Год 1\",\"Год 2\", \"Год 3\", \"Год 4\", \"Год 5\"]\n",
    "plt.pie(slices,labels=years)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 5 (2 балла)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src='http://www.zoom.lk/forums/downloads/subs/socialnetwork/SOCIALNET.jpg' width=500>\n",
    "\n",
    "Вам дана упрощённая актёрская социальная сеть:\n",
    "- предполагаем, что два ведущих актёра в фильме не могли не познакомиться друг с другом во время съёмок\n",
    "- узел сети -- актёр\n",
    "- связь в сети устанавливается, если актёры вместе снимались в ведущих ролях хотя бы в одном фильме\n",
    "- данные взяты из датасета [MovieLens + IMDb/Rotten Tomatoes](http://files.grouplens.org/datasets/hetrec2011/hetrec2011-movielens-readme.txt)\n",
    "\n",
    "В таблице `social.csv` записаны пары актёров\n",
    "\n",
    "Для начала, считайте данные и создайте граф:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Выведите число пользователей сети и связей между ними:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Выведите имена **всех** актёров с наибольшим и наименьшим числом друзей в нашей сети:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Представим себе, что перед вами стоит задача познакомить самых необщительных пользователей сети (их имена получены выше) с кем-то, кто достаточно выгодно расположен внутри неё.\n",
    "\n",
    "Найдите наиболее выгодно расположенного в сети актёра и поясните свой выбор:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для любых $3$ асоциальных актёров постройте кратчайший путь до найденного \"выгодного\" человека:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
